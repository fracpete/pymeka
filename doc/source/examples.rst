Examples
========

The following examples are meant to be executed in sequence, as they rely on previous steps,
e.g., on data present.

For more examples, check out the example repository on github:

`github.com/fracpete/pymeka-examples <https://github.com/fracpete/pymeka-examples>`__



Start up JVM
------------

.. code-block:: python

   import meka.core.jvm as jvm
   jvm.start()

If you want to use the classpath environment variable and all currently installed Weka packages,
use the following call:

.. code-block:: python

   jvm.start(system_cp=True, packages=True)

In case your Weka home directory is not located in `wekafiles` in your user's home directory,
then you have two options for specifying the alternative location: use the `WEKA_HOME` environment
variable or the `packages` parameter, supplying a directory. The latter is shown below:

.. code-block:: python

   jvm.start(packages="/my/packages/are/somwhere/else")

Most of the times, you will want to increase the maximum heap size available to the JVM.
The following example reserves 512 MB:

.. code-block:: python

   jvm.start(max_heap_size="512m")

If you want to print system information at start up time, then you can use the `system_info`
parameter:

.. code-block:: python

   jvm.start(system_info=True)

This will output key-value pairs generated by Weka's `weka.core.SystemInfo` class,
similar to this::

   DEBUG:meka.core.jvm:Adding bundled jars
   DEBUG:meka.core.jvm:Classpath=['/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/doxia-sink-api-1.0.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/native_system-java-1.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-win-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/txw2-2.3.5.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/bmad-2.4.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/markdownj-core-0.4.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/meka-1.9.8.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-osx-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/fcms-widgets-0.0.22.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-linux-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/plexus-container-default-1.0-alpha-9-stable-1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/java-cup-runtime-11b-20160615.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jakarta.activation-1.2.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jakarta.activation-api-1.2.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-profile-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/multisearch-weka-package-2021.2.17.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/autoencoder-0.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-linux-armhf-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-artifact-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-win-i686-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-settings-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/flatlaf-3.4.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/ejml-0.22.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/weka-dev-3.9.6.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/scala-library-2.10.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/plexus-utils-3.0.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jfilechooser-bookmarks-0.1.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/mst-4.0.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-linux-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-linux-armhf-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jakarta.xml.bind-api-2.3.3.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/arpack_combined_all-0.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jaxb-runtime-2.3.5.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/meka-1.9.8-examples.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jama-1.0.3.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-reporting-api-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/istack-commons-runtime-3.0.12.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jcommon-1.0.16.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-win-i686-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/simple-directory-chooser-0.0.3.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-repository-metadata-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/mulan-1.4.0.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/scala-swing-2.10.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/classworlds-1.1-alpha-2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-model-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/rsyntaxtextarea-2.6.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jniloader-1.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/wagon-provider-api-1.0-beta-2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jclipboardhelper-0.1.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jfreechart-1.0.13.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/scalatest-maven-plugin-1.0-M2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-plugin-registry-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/mtj-1.0.4.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/trove4j-3.0.3.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/junit-3.8.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/jshell-scripting-0.1.2.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-java-1.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/commons-lang3-3.7.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_ref-linux-i686-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-plugin-api-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/processoutput4j-0.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/java-cup-11b-20160615.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-osx-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-artifact-manager-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/bounce-0.18.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/maven-project-2.0.9.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/core-1.1.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-win-x86_64-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/netlib-native_system-linux-i686-1.1-natives.jar', '/home/fracpete/development/projects/fracpete/pymeka/src/meka/lib/native_ref-java-1.1.jar']
   DEBUG:meka.core.jvm:MaxHeapSize=default
   DEBUG:meka.core.jvm:Package support disabled
   ...
   DEBUG:meka.core.jvm:user.country=NZ
   DEBUG:meka.core.jvm:user.timezone=Pacific/Auckland

For more information, check out the help of the `jvm` module:

.. code-block:: python

   help(jvm.start)
   help(jvm.stop)


Load data
---------

For loading data, you can use functionality supplied by the python-weka-wrapper3 library (which is a dependency
for pymeka). Once loaded, you need to call the `prepare_data` function of the `meka.core.mlutils` module to
interpret the relation name for identifying the class attributes.

Perform automatic loading of known file types using the `load_any_file` function:

.. code-block:: python

   from weka.core.converters import load_any_file
   from meka.core.mlutils import prepare_data
   data = load_any_file("/some/where/Music.arff")
   prepare_data(data)


Build multi-label classifier
----------------------------

Once you have data loaded, you can build your classifier, e.g., a multi-label one like `meka.classifiers.multilabel.BR`:

.. code-block:: python

   from meka.classifiers import MultiLabelClassifier
   br = MultiLabelClassifier(classname="meka.classifiers.multilabel.BR")
   br.build_classifier(data)
   print(br.model)


Build multi-target classifier
-----------------------------

For multi-target classifiers, like `meka.classifiers.multitargete.CC`, you would use the following:

.. code-block:: python

   from meka.classifiers import MultiTargetClassifier
   br = MultiTargetClassifier(classname="meka.classifiers.multitarget.CC")
   br.build_classifier(data)
   print(br.model)


Build and evaluate model
------------------------

If you have a train and test set, then you can use these to train and evaluate a classifier as follows:

.. code-block:: python

   train = ...  # the training set
   test = ...  # the test set
   br = MultiTargetClassifier(classname="meka.classifiers.multitarget.CC")
   result = Evaluation.evaluate_model(br, train, test, top="PCut1", vop="3")
   print(result)



Weka Packages
-------------

The following examples show how to list, install and uninstall an *official* Weka package:

.. code-block:: python

   import weka.core.packages as packages
   items = packages.all_packages()
   for item in items:
       if item.name == "CLOPE":
           print(item.name + " " + item.url)

   packages.install_package("CLOPE")
   items = packages.installed_packages()
   for item in items:
       print(item.name + " " + item.url)

   packages.uninstall_package("CLOPE")
   items = packages.installed_packages()
   for item in items:
       print(item.name + " " + item.url)

You can also install *unofficial* packages. The following example installs a previously downloaded zip file:

.. code-block:: python

   import weka.core.packages as packages
   success = packages.install_package("/some/where/funky-package-1.0.0.zip")
   print(success)

And here installing it directly from a URL:

.. code-block:: python

   import weka.core.packages as packages
   info = packages.install_package("http://some.server.com/funky-package-1.0.0.zip", details=True)
   print(info)

Using the `details=True` flag, you can receive a dictionary instead of a simple boolean.
This dictionary consists of:

* `from_repo`: whether the package was installed from the repo or not (i.e., unofficial URL or local archive)
* `version`: the version (only for packages from the repo)
* `error`: any error that may have occurred during installation
* `install_message`: optional message from the package maintainer on the installation
* `success`: whether the package was installed successfully

Of course, you can also install multiple packages in one go using the
`install_packages` method:

.. code-block:: python

   import weka.core.packages as packages
   info = packages.install_packages([
       "http://some.server.com/funky-package-1.0.0.zip",
       "http://some.server.com/cool-package-2.0.0.zip",
       "http://some.server.com/fancy-package-1.1.0.zip",
   ], fail_fast=False, details=True)

This method offers the `details` flag as well and returns a dictionary with
the package name/URL/file name as the key and the information dictionary as
the value.

With the `fail_fast` flag you can control whether to stop the installation process
as soon as the first package fails to install (`fail_fast=True`) or keep trying to
install them (`fail_fast=False`).

You can include automatic installation of packages in your scripts:

.. code-block:: python

   import sys
   import weka.core.jvm as jvm
   from weka.core.packages import install_missing_package, install_missing_packages, LATEST

   # installs a single package (if missing) and exits if installation occurred (outputs messages in console)
   install_missing_package("CLOPE", stop_jvm_and_exit=True)

   # installs any missing package, outputs messages in console, but restarting JVM is left to script
   success, exit_required = install_missing_packages([("CLOPE", LATEST), ("gridSearch", LATEST), ("multisearch", LATEST)])
   if exit_required:
       jvm.stop()
       sys.exit(0)


You can also output suggested Weka packages for partial class/package names or exact class names (default is partial
string matching):

.. code-block:: python

   # suggest package for classifier 'RBFClassifier'
   search = "RBFClassifier"
   suggestions = packages.suggest_package(search)
   print("suggested packages for " + search + ":", suggestions)

   # suggest package for package '.ft.'
   search = ".ft."
   suggestions = packages.suggest_package(search)
   print("suggested packages for " + search + ":", suggestions)

   # suggest package for classifier 'weka.classifiers.trees.J48graft'
   search = "weka.classifiers.trees.J48graft"
   suggestions = packages.suggest_package(search, exact=True)
   print("suggested packages for " + search + ":", suggestions)



Stop JVM
--------

.. code-block:: python

   jvm.stop()
